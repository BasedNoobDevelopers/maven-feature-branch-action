name: Feature Branch Workflow

run-name: "Feature Branch CI -- ${{github.event.inputs.action}} Action - feature/${{github.event.inputs.feature_branch}} "

# permissions:
#   contents: 'write'
#   id-token: 'write'

# Trigger workflow manually using the UI button
on:
  workflow_call:
    inputs:
      action:
        type: string
        required: true
      feature_branch:
        type: string
        required: true
        
env:
  TRUNK_BRANCH: main
  FEATURE_BRANCH: feature/${{github.event.inputs.feature_branch}}
  PR_EXIST: 'false'
  PR_URL: ''
  PR_HTML_URL: ''

# Define jobs within the workflow
jobs:
  # check_if_pr:
  #   runs-on: ubuntu-latest
  #   name: Check If PR Exist For Branch
  #   if: github.event.inputs.feature_branch != ''
  #   steps:

  #     - name: Get Pull Request
  #       id: getPRList
  #       uses: OmOmofonmwan/get-pr-number-based-off-branch-name@main
  #       with:
  #         github_token: ${{secrets.GITHUB_TOKEN}}
  #         repository: ${{github.repository}}
  #         branch_name: ${{env.FEATURE_BRANCH}}

  #     - name: Update PR Environment Variables
  #       if: steps.getPRList.outputs.pr_exists == 'true'
  #       run: |
  #         echo "PR_EXIST=true" >> $GITHUB_ENV
  #         echo "PR_URL=${{steps.getPRList.outputs.pr_url}}" >> $GITHUB_ENV
  #         echo "PR_HTML_URL=${{steps.getPRList.outputs.pr_html_url}}" >> $GITHUB_ENV

  call_composite_actions:
    runs-on: ubuntu-latest
    steps:
          - name: Checkout Code Repository
            uses: actions/checkout@v4

          - name: Setup Java
            uses: actions/setup-java@v4
            with:
                distribution: 'adopt'
                java-version: '21'
          - name: Build IKMDEV Code
            uses: BasedNoobDevelopers/maven-feature-branch-action@main
            with:
                branch_name: ${{inputs.feature_branch}}
                action_chosen: ${{inputs.action}}
                TOKEN: ${{secrets.GITHUB_TOKEN}}
  
  # start_action:
  #   runs-on: ubuntu-latest
  #   name: Start Action - feature/${{github.event.inputs.feature_branch}}
  #   needs: check_if_pr
  #   if: github.event.inputs.action == 'Start' 

  #   permissions: write-all

  #   steps:
  #     - name: If PR Exist
  #       if: env.PR_EXIST == 'true'
  #       run: |
  #         echo "ERROR: Pull Request Already Exists For ${{env.FEATURE_BRANCH}}"
  #         exit 1

  #     - name: Checkout Code Repository
  #       uses: actions/checkout@v4

  #     - name: Setup Java
  #       uses: actions/setup-java@v4
  #       with:
  #         distribution: 'adopt'
  #         java-version: '21'

  #     - name: Get Current Version
  #       run: |
  #         echo "POM_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV

  #     - name: Print Version
  #       run: echo "Current Version - ${{env.POM_VERSION}}"

  #     - name: Split version code
  #       uses: xom9ikk/split@v1.1
  #       id: splitVersion
  #       with:
  #         string: ${{env.POM_VERSION}}
  #         separator: -SNAPSHOT
  #         limit: -1

  #     - name: Set New Unique Version
  #       run: echo "uniqueVersion=${{steps.splitVersion.outputs._0}}-${{github.event.inputs.feature_branch}}-SNAPSHOT" >> $GITHUB_ENV

  #     # The GitHub Actions workflow will automatically use the existing  global user.name configuration set on the developer's machine for any Git operations within the workflow. No additional configuration is needed in the workflow YAML file.
  #     - name: Commit & Push
  #       run: |
  #         git config user.name "${{ github.actor }}"
  #         git config user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
  #         git pull -p
  #         git checkout -b $FEATURE_BRANCH
  #         mvn versions:set -DnewVersion=${{env.uniqueVersion}} -DgenerateBackupPoms=false
  #         git commit -am "Draft: Update feature version to ${{env.uniqueVersion}}"
  #         git pull origin main
  #         git push -u origin $FEATURE_BRANCH

  #     - name: Create PR 
  #       if: env.PR_EXIST == 'false'
  #       run: |
  #         curl -L \
  #             -X POST \
  #             -H "Accept: application/vnd.github+json" \
  #             -H "Authorization: Bearer ${{secrets.GITHUB_TOKEN}}" \
  #             -H "X-GitHub-Api-Version: 2022-11-28" \
  #            https://api.github.com/repos/BasedNoobDevelopers/Noob-GitHub-Actions-POC/pulls \
  #         -d '{"title":"Draft - ${{env.FEATURE_BRANCH}}","body":"Draft","head":"${{github.repository_owner}}:${{env.FEATURE_BRANCH}}","base":"BasedNoobDevelopers:${{env.TRUNK_BRANCH}}"}'

#   resume_action:
#     runs-on: ubuntu-latest
#     name: Resume Action - feature/${{github.event.inputs.feature_branch}}
#     if: github.event.inputs.action == 'Resume'
#     needs: check_if_pr
#     permissions:
#       contents: write
#       pull-requests: write

#     steps:
#       - name: If PR Does Not Exist
#         if: env.PR_EXIST == 'false'
#         run: |
#           echo "ERROR: Pull Request Does Not Exist For ${{env.FEATURE_BRANCH}}"
#           exit 1

#       - name: Checkout Code Repository
#         uses: actions/checkout@v4

#       - name: Setup Java
#         uses: actions/setup-java@v4
#         with:
#           distribution: 'adopt'
#           java-version: '21'

#       - name: Get Current Version
#         run: |
#           echo "POM_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV

#       - name: Print Version
#         run: echo ${{env.POM_VERSION}}

#       - name: Split version code
#         uses: xom9ikk/split@v1.1
#         id: splitVersion
#         with:
#           string: ${{env.POM_VERSION}}
#           separator: -SNAPSHOT
#           limit: -1

#       - name: Revert to Unique Version
#         run: echo "uniqueVersion=${{steps.splitVersion.outputs._0}}-${{github.event.inputs.feature_branch}}-SNAPSHOT" >> $GITHUB_ENV

#       - name: Commit & Push
#         run: |
#           git config user.name "${{ github.actor }}"
#           git config user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
#           git config --get remote.origin.fetch
#           git checkout $TRUNK_BRANCH
#           git pull -p
#           git checkout $FEATURE_BRANCH
#           mvn versions:set -DnewVersion=${{env.uniqueVersion}} -DgenerateBackupPoms=false
#           git commit -am "Draft: Update feature version to ${{env.uniqueVersion}}"
#           git pull --all
#           git push origin $FEATURE_BRANCH

#       - name: Run the Action
#         uses: devops-infra/action-pull-request@v0.5.5
#         with:
#           github_token: ${{ secrets.GITHUB_TOKEN }}
#           source_branch: ${{env.FEATURE_BRANCH}}
#           target_branch: ${{env.TRUNK_BRANCH}}
#           title: Draft - ${{env.FEATURE_BRANCH}}
#           body: "**Currently work in progress - ${{env.FEATURE_BRANCH}}**"
#           draft: true

#   finish_action:
#     runs-on: ubuntu-latest
#     name: Finish Action - feature/${{github.event.inputs.feature_branch}}
#     if: github.event.inputs.action == 'Finish'
#     needs: check_if_pr
#     permissions:
#       contents: write
#       pull-requests: write

#     steps:
#       - name: If PR Does Not Exist
#         if: env.PR_EXIST == 'false'
#         run: |
#           echo "ERROR: Pull Request Does Not Exist For ${{env.FEATURE_BRANCH}}"
#           exit 1
          
#       - name: Checkout Code Repository
#         uses: actions/checkout@v4

#       - name: Setup Java
#         uses: actions/setup-java@v4
#         with:
#           distribution: 'adopt'
#           java-version: '21'

#       - name: Get Current Version
#         run: |
#           echo "POM_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV

#       - name: Print Version
#         run: echo "Current Version - ${{env.POM_VERSION}}"

#       - name: Split version code
#         uses: xom9ikk/split@v1.1
#         id: splitVersion
#         with:
#           string: ${{env.POM_VERSION}}
#           separator: "-"
#           limit: -1

#       - name: Set SNAPSHOT Version
#         run: echo "snapshotVersion=${{steps.splitVersion.outputs._0}}-SNAPSHOT" >> $GITHUB_ENV

#       - name: Commit & Push
#         run: |
#           git config user.name "${{ github.actor }}"
#           git config user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
#           git checkout $TRUNK_BRANCH
#           git pull -p
#           git checkout $FEATURE_BRANCH
#           mvn versions:set -DnewVersion=$snapshotVersion -DgenerateBackupPoms=false
#           git commit -am "Branch Ready For Review - Reverted back to original snapshot version $snapshotVersion"
#           git push origin $FEATURE_BRANCH

#   update_pull_request:
#     needs: 
#       -  resume_action
#       -  finish_action
#     runs-on: ubuntu-latest
#     permissions:
#       contents: write
#       pull-requests: write

#     steps:
#       - name: Print
#         run: echo ${{toJson(github)}}
#       - name: Update PR
#         if: steps.getPRList.outputs.pr_exists == 'true'
#         run: |
#           curl -L \
#            -X PATCH \
#            -H "Accept: application/vnd.github+json" \
#            -H "Authorization: Bearer ${{secrets.GITHUB_TOKEN}}" \
#            -H "X-GitHub-Api-Version: 2022-11-28" \
#            ${{steps.getPRList.outputs.pr_url}} \
#            -d '{"title":"Ready For Review - ${{env.FEATURE_BRANCH}}","body":"Ready For Review - ${{env.FEATURE_BRANCH}}","state":"open", "draft": "false"}'

#       - name: Set PR To Ready
#         if: steps.getPRList.outputs.pr_exists == 'true'
#         run: gh pr ready ${{steps.getPRList.outputs.pr_html_url}}
#         env:
#           GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}